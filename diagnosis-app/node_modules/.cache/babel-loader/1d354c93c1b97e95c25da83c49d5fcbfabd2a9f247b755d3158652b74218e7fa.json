{"ast":null,"code":"var _jsxFileName = \"/Users/ahmedansari/Desktop/coding_projects/JavaScript/Hackathon/test/disease-management/diagnosis-app/src/components/GPT_PROMPT/Gpt_prompt.jsx\";\nimport React from \"react\";\nimport \"./Gpt_prompt.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Gpt_prompt(_ref) {\n  let {\n    setResponse\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prompt_box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"What are your symptoms?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async e => {\n        e.preventDefault();\n        const gpt_res = await fetch(`http://localhost:2000/completion/${\"Give me a list of possible diseases if I have \" + e.target[0].value + \"Give me a list of UK medications as well and links to articles for more information. Response should be divided into diseases,medcines, and article section. Respond with a JSON string where each section is a property in lowercase.The JSON string has properties articles, medicines, diseases There should be atleast 5 Article links which should be from NHS, Mayo clinic, Web MD and other reputable websites. Remove all new line characters in the response.\"}`);\n        const res_json = await gpt_res.json();\n        setResponse(res_json);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        type: \"text\",\n        className: \"text_box\",\n        placeholder: \"Enter your symptoms\",\n        onChange: e => console.log(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"submit_btn\",\n        value: \"Ask!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n_c = Gpt_prompt;\nexport default Gpt_prompt;\nvar _c;\n$RefreshReg$(_c, \"Gpt_prompt\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Gpt_prompt","_ref","setResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","e","preventDefault","gpt_res","fetch","target","value","res_json","json","type","placeholder","onChange","console","log","_c","$RefreshReg$"],"sources":["/Users/ahmedansari/Desktop/coding_projects/JavaScript/Hackathon/test/disease-management/diagnosis-app/src/components/GPT_PROMPT/Gpt_prompt.jsx"],"sourcesContent":["import React from \"react\";\nimport \"./Gpt_prompt.css\";\nfunction Gpt_prompt({ setResponse }) {\n  return (\n    <div className=\"prompt_box\">\n    <h2>What are your symptoms?</h2>\n      <form\n        onSubmit={async (e) => {\n          e.preventDefault();\n          const gpt_res = await fetch(\n            `http://localhost:2000/completion/${\"Give me a list of possible diseases if I have \" + e.target[0].value + \"Give me a list of UK medications as well and links to articles for more information. Response should be divided into diseases,medcines, and article section. Respond with a JSON string where each section is a property in lowercase.The JSON string has properties articles, medicines, diseases There should be atleast 5 Article links which should be from NHS, Mayo clinic, Web MD and other reputable websites. Remove all new line characters in the response.\"}`\n          );\n          const res_json = await gpt_res.json();\n          setResponse(res_json);\n        }}>\n        <textarea\n          type=\"text\"\n          className=\"text_box\"\n          placeholder=\"Enter your symptoms\"\n          onChange={(e) => console.log(e.target.value)}\n        />\n        <input type=\"submit\" className=\"submit_btn\" value=\"Ask!\" />\n      </form>\n    </div>\n  );\n}\n\nexport default Gpt_prompt;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,SAASC,UAAUA,CAAAC,IAAA,EAAkB;EAAA,IAAjB;IAAEC;EAAY,CAAC,GAAAD,IAAA;EACjC,oBACEF,OAAA;IAAKI,SAAS,EAAC,YAAY;IAAAC,QAAA,gBAC3BL,OAAA;MAAAK,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC9BT,OAAA;MACEU,QAAQ,EAAE,MAAOC,CAAC,IAAK;QACrBA,CAAC,CAACC,cAAc,EAAE;QAClB,MAAMC,OAAO,GAAG,MAAMC,KAAK,CACxB,oCAAmC,gDAAgD,GAAGH,CAAC,CAACI,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,GAAG,wcAAyc,EAAC,CACtjB;QACD,MAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,IAAI,EAAE;QACrCf,WAAW,CAACc,QAAQ,CAAC;MACvB,CAAE;MAAAZ,QAAA,gBACFL,OAAA;QACEmB,IAAI,EAAC,MAAM;QACXf,SAAS,EAAC,UAAU;QACpBgB,WAAW,EAAC,qBAAqB;QACjCC,QAAQ,EAAGV,CAAC,IAAKW,OAAO,CAACC,GAAG,CAACZ,CAAC,CAACI,MAAM,CAACC,KAAK;MAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC7C,eACFT,OAAA;QAAOmB,IAAI,EAAC,QAAQ;QAACf,SAAS,EAAC,YAAY;QAACY,KAAK,EAAC;MAAM;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACtD;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACH;AAEV;AAACe,EAAA,GAvBQvB,UAAU;AAyBnB,eAAeA,UAAU;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}